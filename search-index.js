var searchIndex = {};
searchIndex["soa_derive_example"] = {"doc":"This crate is an example for the [soa_derive] crate functionalities. All the code is generated by a single file:","items":[[3,"Particle","soa_derive_example","A basic Particle type",null,null],[12,"mass","","Mass of the particle",0,null],[12,"position","","Position of the particle",0,null],[12,"kind","","Kind of the particle",0,null],[12,"name","","Name of the particle",0,null],[3,"ParticleVec","","An analog to `Vec<Particle>` with Struct of Array (SoA) layout",null,null],[12,"mass","","A vector of `mass` from a `Particle`",1,null],[12,"position","","A vector of `position` from a `Particle`",1,null],[12,"kind","","A vector of `kind` from a `Particle`",1,null],[12,"name","","A vector of `name` from a `Particle`",1,null],[3,"ParticleRef","","A reference to a `Particle`  with struct of array layout.",null,null],[12,"mass","","A reference to a `mass` from a `ParticleVec`",2,null],[12,"position","","A reference to a `position` from a `ParticleVec`",2,null],[12,"kind","","A reference to a `kind` from a `ParticleVec`",2,null],[12,"name","","A reference to a `name` from a `ParticleVec`",2,null],[3,"ParticleRefMut","","A mutable reference to a `Particle`  with struct of array layout.",null,null],[12,"mass","","A mutable reference to a `mass` from a `ParticleVec`",3,null],[12,"position","","A mutable reference to a `position` from a `ParticleVec`",3,null],[12,"kind","","A mutable reference to a `kind` from a `ParticleVec`",3,null],[12,"name","","A mutable reference to a `name` from a `ParticleVec`",3,null],[3,"ParticleSlice","","A slice of `Particle`  inside a `ParticleVec`  .",null,null],[12,"mass","","A slice of `mass` from a `ParticleVec`",4,null],[12,"position","","A slice of `position` from a `ParticleVec`",4,null],[12,"kind","","A slice of `kind` from a `ParticleVec`",4,null],[12,"name","","A slice of `name` from a `ParticleVec`",4,null],[3,"ParticleSliceMut","","A mutable slice of `Particle`  inside a `ParticleVec`  .",null,null],[12,"mass","","A mutable slice of `mass` from a `ParticleVec`",5,null],[12,"position","","A mutable slice of `position` from a `ParticleVec`",5,null],[12,"kind","","A mutable slice of `kind` from a `ParticleVec`",5,null],[12,"name","","A mutable slice of `name` from a `ParticleVec`",5,null],[0,"zip_particle","","This module contains the marker types for the `ParticleVec::zip()`  functionality.",null,null],[3,"Mass","soa_derive_example::zip_particle","Marker type to access the `mass` field of a `ParticleVec`  in the `ParticleVec::zip()`  function and familly",null,null],[3,"Position","","Marker type to access the `position` field of a `ParticleVec`  in the `ParticleVec::zip()`  function and familly",null,null],[3,"Kind","","Marker type to access the `kind` field of a `ParticleVec`  in the `ParticleVec::zip()`  function and familly",null,null],[11,"iter","soa_derive_example","Get an iterator over the `ParticleRef`  in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter","","Get an iterator over the `ParticleRef`  in this slice.",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Get a mutable iterator over the `ParticleRefMut`  in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"iter","","Get an iterator over the `ParticleRef`  in this vector",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Get a mutable iterator over the `ParticleRefMut`  in this vector",5,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"particle"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"particle"}],"output":{"name":"bool"}}],[11,"zip","","Get an iterator over multiple fields of this `ParticleVec`.",1,null],[11,"zip_mut","","Get an iterator over multiple fields of this `ParticleVec`.",1,null],[11,"zip","","Get an iterator over multiple fields of this `ParticleSlice`.",4,null],[11,"zip","","Get an iterator over multiple fields of this `ParticleSliceMut`.",5,null],[11,"zip_mut","","Get an iterator over multiple fields of this `ParticleSliceMut`.",5,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"particlevec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"particlevec"}],"output":{"name":"bool"}}],[11,"new","","Similar to `Vec<Particle> ::new()`",1,{"inputs":[],"output":{"name":"particlevec"}}],[11,"with_capacity","","Similar to `Vec<Particle> ::with_capacity()`,  initializing all fields with the given `capacity`.",1,{"inputs":[{"name":"usize"}],"output":{"name":"particlevec"}}],[11,"capacity","","Similar to `Vec<Particle> ::capacity()`,  the capacity of all fields should be the same.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Similar to `Vec<Particle> ::reserve()`,  reserving the same `additional` space for all fields.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Similar to `Vec<Particle> ::reserve_exact()`  reserving the same `additional` space for all fields.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Similar to `Vec<Particle> ::shrink_to_fit()`  shrinking all fields.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Similar to `Vec<Particle> ::truncate()`  truncating all fields.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"push","","Similar to `Vec<Particle> ::push()`.",1,{"inputs":[{"name":"self"},{"name":"particle"}],"output":null}],[11,"len","","Similar to `Vec<Particle> ::len()`,  all the fields should have the same length.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Similar to `Vec<Particle> ::is_empty()`,  all the fields should have the same length.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"swap_remove","","Similar to `Vec<Particle> ::swap_remove()`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"particle"}}],[11,"insert","","Similar to `Vec<Particle> ::insert()`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"particle"}],"output":null}],[11,"remove","","Similar to `Vec<Particle> ::remove()`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"particle"}}],[11,"pop","","Similar to `Vec<Particle> ::pop()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Similar to `Vec<Particle> ::append()`.",1,{"inputs":[{"name":"self"},{"name":"particlevec"}],"output":null}],[11,"clear","","Similar to `Vec<Particle> ::clear()`.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"split_off","","Similar to `Vec<Particle> ::split_off()`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"particlevec"}}],[11,"as_slice","","Similar to `Vec<Particle> ::as_slice()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"particleslice"}}],[11,"as_mut_slice","","Similar to `Vec<Particle> ::as_mut_slice()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"particleslicemut"}}],[11,"slice","","Create a slice of this vector matching the given `range`. This is analogous to `Index<Range<usize>>`.",1,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"particleslice"}}],[11,"slice_mut","","Create a mutable slice of this vector matching the given `range`. This is analogous to `IndexMut<Range<usize>>`.",1,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"particleslicemut"}}],[11,"retain","","Similar to `Vec<Particle> ::retain()`.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"particleref"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"particleref"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"particlerefmut"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"particlerefmut"}],"output":{"name":"bool"}}],[11,"as_ref","","Create a `ParticleRef`  from a borrowed `Particle`  .",0,{"inputs":[{"name":"self"}],"output":{"name":"particleref"}}],[11,"as_mut","","Create a `ParticleRefMut`  from a mutably borrowed `Particle`  .",0,{"inputs":[{"name":"self"}],"output":{"name":"particlerefmut"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"particleslice"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"particleslice"}],"output":{"name":"bool"}}],[11,"len","","Similar to `[Particle] ::len()`,  the length of all fields should be the same.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Similar to `[Particle] ::is_empty()`,  the length of all fields should be the same.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"first","","Similar to `[Particle] ::first()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first","","Similar to `[Particle] ::split_first()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","Similar to `[Particle] ::last()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last","","Similar to `[Particle] ::split_last()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_at","","Similar to `[Particle] ::split_at()`.",4,null],[11,"get","","Similar to `[Particle] ::get()`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked","","Similar to `[Particle] ::get_unchecked()`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"particleref"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"particleslicemut"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"particleslicemut"}],"output":{"name":"bool"}}],[11,"as_ref","","Convert a `ParticleSliceMut`  to a `ParticleSlice`  in order to be able to use the methods on the non mutable  version of the slices.",5,{"inputs":[{"name":"self"}],"output":{"name":"particleslice"}}],[11,"len","","Similar to `[Particle] ::len()`,  the length of all fields should be the same.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Similar to `[Particle] ::is_empty()`,  the length of all fields should be the same.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"first_mut","","Similar to `[Particle] ::first_mut()`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first_mut","","Similar to `[Particle] ::split_first_mut()`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_mut","","Similar to `[Particle] ::last_mut()`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last_mut","","Similar to `[Particle] ::last_mut()`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_at_mut","","Similar to `[Particle] ::split_at_mut()`.",5,null],[11,"swap","","Similar to `[Particle] ::swap()`.",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"get","","Similar to `[Particle] ::get()`.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked","","Similar to `[Particle] ::get_unchecked()`.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"particleref"}}],[11,"get_mut","","Similar to `[Particle] ::get_mut()`.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked_mut","","Similar to `[Particle] ::get_unchecked_mut()`.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"particlerefmut"}}],[11,"into_iter","","",4,null],[11,"into_iter","","",5,null]],"paths":[[3,"Particle"],[3,"ParticleVec"],[3,"ParticleRef"],[3,"ParticleRefMut"],[3,"ParticleSlice"],[3,"ParticleSliceMut"]]};
initSearch(searchIndex);
